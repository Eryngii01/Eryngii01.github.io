@using System.Timers
@implements IDisposable

@* Template component: Wrap some content and capture it on rendering to put it somewhere in the component output to
manipulate it *@
<div class="h-full transition duration-500 transform @_animationStyles">
    @ChildContent @* Component parameter; outputted inside the div element *@
</div>

@code {
    private Timer _timer = default;
    private string _animationStyles = "translate-x-full opacity=0";

    @* Type of render fragment *@
    [Parameter, EditorRequired]
    public RenderFragment ChildContent { get; set; } = default;

    protected override void OnInitialized {
        _timer = new Timer(300) { AutoReset = false };
        _timer.Elapsed += TriggerAnimation();
    }

    protected override void OnAfterRender(bool firstRender) {
        if (firstRender) {
            _timer.Start();
        }
    }

    private void TriggerAnimation(object? sender, ElapsedEventArgs e) {
        _animationStyles = "translate-x-0 opacity=100";
        StateHasChanged();
    }

    void IDisposable.Dispose() => _timer.Dispose();
}